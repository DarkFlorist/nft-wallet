{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../ts/library/provider.ts"],"names":[],"mappings":"AACA,OAAO,EAAS,eAAe,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAA;AAC3D,OAAO,EAAE,aAAa,EAAmB,MAAM,2BAA2B,CAAA;AAU1E,MAAM,WAAW,GAAG,KAAK,EACxB,KAAwC,EACxC,QAAyB,EACzB,WAA0B,EACzB,EAAE;IACH,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAA;IAC1F,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAA;IACzC,IAAI,KAAK,CAAC,IAAI,EAAE;QAAE,cAAc,CAAC,KAAK,CAAC,CAAA;IAEvC,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAA;IAC9D,IAAI,CAAC,aAAa,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;IAEjF,KAAK,CAAC,KAAK,GAAG;QACb,QAAQ;QACR,aAAa,EAAE,aAAa,CAAC,KAAK;QAClC,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,YAAY,EAAE,WAAW;KACzB,CAAA;AACF,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,KAAK,EAAE,KAAwC,EAAE,EAAE;IACzE,IAAI,KAAK,CAAC,IAAI,EAAE;QAAE,KAAK,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,CAAA;IAC9C,KAAK,CAAC,KAAK,GAAG,SAAS,CAAA;AACxB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EAC1C,KAAwC,EACxC,SAIE,EACD,EAAE;IACH,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAChG,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAqB,EAAE,EAAE;QAChG,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;SAC7D;aAAM;YACN,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;SACzD;IACF,CAAC,CAAC,CAAA;IAEF,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;IAE5D,MAAM,uBAAuB,GAAG,GAAG,EAAE;QACpC,cAAc,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC,CAAA;IACD,MAAM,uBAAuB,GAAG,CAAC,QAAkB,EAAE,EAAE;QACtD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,cAAc,CAAC,KAAK,CAAC,CAAA;SACrB;aAAM;YACN,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,IAAI,CAAC,aAAa,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;YACjF,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAA;SAC9F;IACF,CAAC,CAAA;IACD,MAAM,oBAAoB,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;QACtD,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAA;QACpF,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;QACnG,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,EAAE;YAC3C,WAAW,EAAE,CAAA;YACb,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAA;YACzD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,iBAAiB,EAAE,uBAAuB,CAAC,CAAA;YAC9D,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAA;YACxD,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;SACnC;QACD,uBAAuB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAA;QACzF,IAAI,KAAK;YAAE,aAAa,CAAC,KAAK,CAAC,CAAA;IAChC,CAAC,CAAA;IACD,MAAM,aAAa,GAAG,CAAC,KAAmB,EAAE,EAAE;QAC7C,IAAI,KAAK;YAAE,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACtD,CAAC,CAAA;IAED,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1C,IAAI,KAAK;YAAE,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACtD,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAA;IACzD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,iBAAiB,EAAE,uBAAuB,CAAC,CAAA;IAC9D,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAA;IACxD,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;IAEnC,MAAM,WAAW,GAAG,GAAG,EAAE;QACxB,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAA;QACtE,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,iBAAiB,EAAE,uBAAuB,CAAC,CAAA;QAC3E,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAA;QACrE,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;IAChD,CAAC,CAAA;IAED,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAA;AAC1C,CAAC,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACtC,KAAY,EACZ,QAA2C,EAC3C,SAA4B;IAE5B,IAAI,CAAC,QAAQ,CAAC,KAAK;QAAE,OAAM;IAC3B,MAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAA;IAC9D,SAAS,CAAC,KAAK,GAAG,EAAE,GAAG,SAAS,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,CAAA;AAC3F,CAAC","sourcesContent":["import { Signal } from '@preact/signals'\nimport { Block, BrowserProvider, getAddress } from 'ethers'\nimport { AddressParser, EthereumAddress } from '../types/ethereumTypes.js'\nimport { BlockInfo } from './types.js'\n\nexport type ProviderStore = {\n\tprovider: BrowserProvider\n\t_clearEvents: () => unknown\n\twalletAddress: EthereumAddress,\n\tchainId: bigint\n}\n\nconst addProvider = async (\n\tstore: Signal<ProviderStore | undefined>,\n\tprovider: BrowserProvider,\n\tclearEvents: () => unknown,\n) => {\n\tconst [signer, network] = await Promise.all([provider.getSigner(), provider.getNetwork()])\n\tconst address = await signer.getAddress()\n\tif (store.peek()) removeProvider(store)\n\n\tconst parsedAddress = AddressParser.parse(getAddress(address))\n\tif (!parsedAddress.success) throw new Error(\"Provider provided invalid address!\")\n\n\tstore.value = {\n\t\tprovider,\n\t\twalletAddress: parsedAddress.value,\n\t\tchainId: network.chainId,\n\t\t_clearEvents: clearEvents,\n\t}\n}\n\nconst removeProvider = async (store: Signal<ProviderStore | undefined>) => {\n\tif (store.peek()) store.peek()?._clearEvents()\n\tstore.value = undefined\n}\n\nexport const connectBrowserProvider = async (\n\tstore: Signal<ProviderStore | undefined>,\n\tblockInfo: Signal<{\n\t\tblockNumber: bigint\n\t\tbaseFee: bigint\n\t\tpriorityFee: bigint\n\t}>,\n) => {\n\tif (!window.ethereum || !window.ethereum.request) throw new Error('No injected wallet detected')\n\tawait window.ethereum.request({ method: 'eth_requestAccounts' }).catch((err: { code: number }) => {\n\t\tif (err.code === 4001) {\n\t\t\tthrow new Error('Connect Wallet: Wallet connection rejected')\n\t\t} else {\n\t\t\tthrow new Error(`Connect Wallet: ${JSON.stringify(err)}`)\n\t\t}\n\t})\n\n\tconst provider = new BrowserProvider(window.ethereum, 'any')\n\n\tconst disconnectEventCallback = () => {\n\t\tremoveProvider(store)\n\t}\n\tconst accountsChangedCallback = (accounts: string[]) => {\n\t\tif (accounts.length === 0) {\n\t\t\tremoveProvider(store)\n\t\t} else {\n\t\t\tconst parsedAddress = AddressParser.parse(getAddress(accounts[0]))\n\t\t\tif (!parsedAddress.success) throw new Error(\"Provider provided invalid address!\")\n\t\t\tstore.value = store.value ? { ...store.value, walletAddress: parsedAddress.value } : undefined\n\t\t}\n\t}\n\tconst chainChangedCallback = async (chainId: string) => {\n\t\tstore.value = store.value ? { ...store.value, chainId: BigInt(chainId) } : undefined\n\t\tconst [accounts, block] = await Promise.all([provider.listAccounts(), provider.getBlock('latest')])\n\t\tif (accounts.length > 0 && window.ethereum) {\n\t\t\tclearEvents()\n\t\t\twindow.ethereum.on('disconnect', disconnectEventCallback)\n\t\t\twindow.ethereum.on('accountsChanged', accountsChangedCallback)\n\t\t\twindow.ethereum.on('chainChanged', chainChangedCallback)\n\t\t\tprovider.on('block', blockCallback)\n\t\t}\n\t\taccountsChangedCallback(await Promise.all(accounts.map(account => account.getAddress())))\n\t\tif (block) blockCallback(block)\n\t}\n\tconst blockCallback = (block: Block | null) => {\n\t\tif (block) updateLatestBlock(block, store, blockInfo)\n\t}\n\n\tprovider.getBlock('latest').then((block) => {\n\t\tif (block) updateLatestBlock(block, store, blockInfo)\n\t})\n\n\twindow.ethereum.on('disconnect', disconnectEventCallback)\n\twindow.ethereum.on('accountsChanged', accountsChangedCallback)\n\twindow.ethereum.on('chainChanged', chainChangedCallback)\n\tprovider.on('block', blockCallback)\n\n\tconst clearEvents = () => {\n\t\twindow.ethereum?.removeListener('disconnect', disconnectEventCallback)\n\t\twindow.ethereum?.removeListener('accountsChanged', accountsChangedCallback)\n\t\twindow.ethereum?.removeListener('chainChanged', chainChangedCallback)\n\t\tprovider.removeListener('block', blockCallback)\n\t}\n\n\taddProvider(store, provider, clearEvents)\n}\n\nexport async function updateLatestBlock(\n\tblock: Block,\n\tprovider: Signal<ProviderStore | undefined>,\n\tblockInfo: Signal<BlockInfo>,\n) {\n\tif (!provider.value) return\n\tconst baseFee = block.baseFeePerGas ? block.baseFeePerGas : 0n\n\tblockInfo.value = { ...blockInfo.value, blockNumber: BigInt(block.number ?? 0n), baseFee }\n}\n"]}