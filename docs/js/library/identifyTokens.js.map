{"version":3,"file":"identifyTokens.js","sourceRoot":"","sources":["../../ts/library/identifyTokens.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract, Provider, Interface, ZeroAddress, BytesLike } from \"ethers\"\nimport { EthereumAddress } from \"../types/ethereumTypes.js\"\nimport { serialize } from \"../types/wireTypes.js\"\nimport { ERC1155ABI, ERC20ABI, ERC721ABI, MulticallABI } from './abi.js'\n\ntype EOA = {\n\ttype: 'EOA'\n\taddress: string\n}\n\ntype UnknownContract = {\n\ttype: 'contract'\n\taddress: string\n}\n\ntype ERC20 = {\n\ttype: 'ERC20'\n\taddress: string\n\tname: string\n\tsymbol: string\n\tdecimals: bigint\n\ttotalSupply: bigint\n}\n\nexport type ERC721 = {\n\ttype: 'ERC721'\n\taddress: string\n\towner: string\n\tid: bigint\n\tname?: string\n\tsymbol?: string\n\ttokenURI?: string\n}\n\nexport type ERC1155 = {\n\ttype: 'ERC1155'\n\taddress: string\n\ttokenURI?: string\n\tbalance: bigint\n\tid: bigint\n}\n\nexport type IdentifiedAddress = (EOA | ERC20 | ERC721 | ERC1155 | UnknownContract) & { inputId: bigint }\nexport type SupportedToken = (ERC721 | ERC1155) & { inputId: bigint }\n\n\nexport async function itentifyAddress(address: string, id: bigint, provider: Provider, user: EthereumAddress): Promise<IdentifiedAddress[]> {\n\tconst contractCode = await provider.getCode(address)\n\tif (contractCode === '0x') return [{ type: 'EOA', address, inputId: id }]\n\n\tconst multicall = new Contract('0x5ba1e12693dc8f9c48aad8770482f4739beed696', MulticallABI, provider)\n\tconst nftInterface = new Interface(ERC721ABI)\n\tconst erc20Interface = new Interface(ERC20ABI)\n\tconst erc1155Interface = new Interface(ERC1155ABI)\n\n\tconst calls = [\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('supportsInterface', ['0x80ac58cd']) // Is ERC721\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('supportsInterface', ['0x5b5e139f']) // Is ERC721Metadata\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('supportsInterface', ['0xd9b67a26']) // Is ERC1155\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('supportsInterface', ['0x0e89341c']) // Is ERC1155Metadata\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('ownerOf', [id])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: erc20Interface.encodeFunctionData('name', [])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: erc20Interface.encodeFunctionData('symbol', [])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: erc20Interface.encodeFunctionData('decimals', [])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: erc20Interface.encodeFunctionData('totalSupply', [])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: nftInterface.encodeFunctionData('tokenURI', [id])\n\t\t},\n\t\t{\n\t\t\ttarget: address,\n\t\t\tcallData: erc1155Interface.encodeFunctionData('uri', [id])\n\t\t}\n\t]\n\n\tconst [isERC721, hasMetadata, isERC1155, isERC1155Metadata, owner, name, symbol, decimals, totalSupply, tokenURI, erc1155Uri]: { success: boolean, returnData: BytesLike }[] = await multicall.tryAggregate.staticCall(false, calls)\n\n\tlet matchingAssetTypes: IdentifiedAddress[] = []\n\n\ttry {\n\t\tif (isERC721.success && nftInterface.decodeFunctionResult('supportsInterface', isERC721.returnData)[0] === true && owner.success === true && nftInterface.decodeFunctionResult('ownerOf', owner.returnData)[0] !== ZeroAddress) {\n\t\t\tmatchingAssetTypes.push({\n\t\t\t\ttype: 'ERC721',\n\t\t\t\tinputId: id,\n\t\t\t\taddress,\n\t\t\t\tid,\n\t\t\t\towner: nftInterface.decodeFunctionResult('ownerOf', owner.returnData)[0],\n\t\t\t\tname: hasMetadata.success && nftInterface.decodeFunctionResult('supportsInterface', hasMetadata.returnData)[0] ? nftInterface.decodeFunctionResult('name', name.returnData)[0] : undefined,\n\t\t\t\ttokenURI: hasMetadata.success && nftInterface.decodeFunctionResult('supportsInterface', hasMetadata.returnData)[0] ? nftInterface.decodeFunctionResult('tokenURI', tokenURI.returnData)[0] : undefined,\n\t\t\t})\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n\n\ttry {\n\t\tif (isERC1155.success && nftInterface.decodeFunctionResult('supportsInterface', isERC1155.returnData)[0] === true) {\n\t\t\tconst tokenContract = new Contract(address, ERC1155ABI, provider)\n\t\t\tconst userAddress = serialize(EthereumAddress, user)\n\t\t\tconst balance = await tokenContract.balanceOf(userAddress, id)\n\t\t\tconst uri: string | undefined = erc1155Uri.success && isERC1155Metadata.success && erc1155Interface.decodeFunctionResult('supportsInterface', isERC1155Metadata.returnData)[0] === true ? erc1155Interface.decodeFunctionResult('uri', erc1155Uri.returnData)[0] : undefined\n\t\t\tmatchingAssetTypes.push({\n\t\t\t\ttype: 'ERC1155',\n\t\t\t\tinputId: id,\n\t\t\t\tid,\n\t\t\t\taddress,\n\t\t\t\tbalance,\n\t\t\t\ttokenURI: uri ? uri.replaceAll(`{id}`, id.toString(10)) : undefined,\n\t\t\t})\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n\n\ttry {\n\t\tif (name.success && decimals.success && symbol.success && totalSupply.success) {\n\t\t\tmatchingAssetTypes.push({\n\t\t\t\ttype: 'ERC20',\n\t\t\t\tinputId: id,\n\t\t\t\taddress,\n\t\t\t\tname: erc20Interface.decodeFunctionResult('name', name.returnData)[0],\n\t\t\t\tsymbol: erc20Interface.decodeFunctionResult('symbol', symbol.returnData)[0],\n\t\t\t\tdecimals: BigInt(erc20Interface.decodeFunctionResult('decimals', decimals.returnData)[0]),\n\t\t\t\ttotalSupply: erc20Interface.decodeFunctionResult('totalSupply', totalSupply.returnData)[0]\n\t\t\t})\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n\n\t// If doesn't pass checks being an ERC20 or ERC721, then we only know its a contract\n\treturn matchingAssetTypes.length > 0 ? matchingAssetTypes : [{ type: 'contract', address, inputId: id }]\n}\n"]}