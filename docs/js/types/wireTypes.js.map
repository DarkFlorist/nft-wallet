{"version":3,"file":"wireTypes.js","sourceRoot":"","sources":["../../ts/types/wireTypes.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,SAAS,CAA0B,OAAU,EAAE,KAAQ;IACtE,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAkB,CAAA;AACjD,CAAC","sourcesContent":["import * as t from 'funtypes'\n\nexport function serialize<T, U extends t.Codec<T>>(funtype: U, value: T) {\n\treturn funtype.serialize(value) as ToWireType<U>\n}\n\nexport type UnionToIntersection<T> = (T extends unknown ? (k: T) => void : never) extends (k: infer I) => void ? I : never\n\nexport type ToWireType<T> = T extends t.Intersect<infer U>\n\t? UnionToIntersection<{ [I in keyof U]: ToWireType<U[I]> }[number]>\n\t: T extends t.Union<infer U>\n\t? { [I in keyof U]: ToWireType<U[I]> }[number]\n\t: T extends t.Record<infer U, infer V>\n\t? Record<t.Static<U>, ToWireType<V>>\n\t: T extends t.Partial<infer U, infer V>\n\t? V extends true\n\t? { readonly [K in keyof U]?: ToWireType<U[K]> }\n\t: { [K in keyof U]?: ToWireType<U[K]> }\n\t: T extends t.Object<infer U, infer V>\n\t? V extends true\n\t? { readonly [K in keyof U]: ToWireType<U[K]> }\n\t: { [K in keyof U]: ToWireType<U[K]> }\n\t: T extends t.Readonly<t.Tuple<infer U>>\n\t? { readonly [P in keyof U]: ToWireType<U[P]> }\n\t: T extends t.Tuple<infer U>\n\t? { [P in keyof U]: ToWireType<U[P]> }\n\t: T extends t.ReadonlyArray<infer U>\n\t? readonly ToWireType<U>[]\n\t: T extends t.Array<infer U>\n\t? ToWireType<U>[]\n\t: T extends t.ParsedValue<infer U, infer _>\n\t? ToWireType<U>\n\t: T extends t.Codec<infer U>\n\t? U\n\t: never\n"]}