{"version":3,"file":"ethereumTypes.js","sourceRoot":"","sources":["../../ts/types/ethereumTypes.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,UAAU,CAAA;AAE7B,MAAM,CAAC,MAAM,aAAa,GAA8C;IACvE,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;QAChB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC;YACvC,OAAO;gBACN,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,GAAG,KAAK,uCAAuC;aACxD,CAAA;;YACG,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAA;IACpD,CAAC;IACD,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE;QACpB,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,OAAO,KAAK,mBAAmB,EAAE,CAAA;QACrG,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAA;IAC7E,CAAC;CACD,CAAA;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAA","sourcesContent":["import * as t from 'funtypes'\n\nexport const AddressParser: t.ParsedValue<t.String, bigint>['config'] = {\n\tparse: (value) => {\n\t\tif (!/^0x([a-fA-F0-9]{40})$/.test(value))\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: `${value} is not a hex string encoded address.`,\n\t\t\t}\n\t\telse return { success: true, value: BigInt(value) }\n\t},\n\tserialize: (value) => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.` }\n\t\treturn { success: true, value: `0x${value.toString(16).padStart(40, '0')}` }\n\t},\n}\n\nexport const EthereumAddress = t.String.withParser(AddressParser)\nexport type EthereumAddress = t.Static<typeof EthereumAddress>\n"]}