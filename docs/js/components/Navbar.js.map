{"version":3,"file":"Navbar.js","sourceRoot":"","sources":["../../ts/components/Navbar.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAU,WAAW,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAChE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,sBAAsB,EAAiB,MAAM,wBAAwB,CAAA;AAE9E,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AAEpC,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,EACtB,SAAS,EACT,QAAQ,GAIR,EAAE,EAAE;IACJ,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE;QACvC,IAAI,CAAC,QAAQ,CAAC,KAAK;YAAE,OAAO,EAAE,CAAA;QAC9B,MAAM,OAAO,GAAG,KAAK,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAA;QAC1D,OAAO,OAAO,IAAI,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAA;IACxH,CAAC,CAAC,CAAA;IACF,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAC3F,MAAM,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;IAEjC,OAAO,CACN,eAAK,SAAS,EAAC,yFAAyF,aACvG,aAAI,SAAS,EAAC,iDAAiD,2BAAgB,EAC/E,cAAK,SAAS,EAAC,yFAAyF,YACtG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CACjB,8BACC,eAAK,SAAS,EAAC,oDAAoD,aAClE,YAAG,SAAS,EAAC,gDAAgD,YAAE,SAAS,CAAC,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,GAAK,EAC5H,gBAAM,SAAS,EAAC,qDAAqD,aACpE,cAAK,KAAK,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,OAAO,EAAC,WAAW,EAAC,KAAK,EAAC,4BAA4B,EAAC,SAAS,EAAC,cAAc,YAAC,eAAM,IAAI,EAAC,cAAc,EAAC,CAAC,EAAC,4YAA4Y,eAAW,UAAU,GAAQ,GAAM,EACxjB,cAAc,CAAC,KAAK,IAAQ,IACxB,EACP,KAAC,OAAO,IAAC,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,YAAY,GAAI,IACtD,CACH,CAAC,CAAC,CAAC,CACH,8BACC,YAAG,SAAS,EAAC,OAAO,oCAAwB,EAC5C,KAAC,MAAM,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,sBAAsB,CAAC,QAAQ,EAAE,SAAS,CAAC,wBAAkB,IAClF,CACH,GACI,IACD,CACN,CAAA;AACF,CAAC,CAAA","sourcesContent":["import { Signal, useComputed, useSignal } from '@preact/signals'\nimport { knownNetworks } from '../library/networks.js'\nimport { connectBrowserProvider, ProviderStore } from '../library/provider.js'\nimport { BlockInfo } from '../library/types.js'\nimport { EthereumAddress } from '../types/ethereumTypes.js'\nimport { serialize } from '../types/wireTypes.js'\nimport { Blockie } from './Blockie.js'\nimport { Button } from './Button.js'\n\nexport const Navbar = ({\n\tblockInfo,\n\tprovider,\n}: {\n\tblockInfo: Signal<BlockInfo>,\n\tprovider: Signal<ProviderStore | undefined>,\n}) => {\n\tconst displayNetwork = useComputed(() => {\n\t\tif (!provider.value) return ''\n\t\tconst chainId = `0x${provider.value.chainId.toString(16)}`\n\t\treturn chainId in knownNetworks ? knownNetworks[chainId].displayName : `Network ${provider.value.chainId.toString(10)}`\n\t})\n\tconst walletAddress = useComputed(() => provider.value ? provider.value.walletAddress : 0n)\n\tconst blockieScale = useSignal(5)\n\n\treturn (\n\t\t<div className='flex flex-col w-full sm:flex-row items-center justify-between gap-4 border-slate-400/30'>\n\t\t\t<h1 className='text-sm bg-white text-black py-2 px-4 font-mono'>NFT Sender</h1>\n\t\t\t<div className='flex gap-4 items-center justify-center w-min max-w-full px-4 sm:px-0 text-sm sm:text-md'>\n\t\t\t\t{provider.value ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='flex flex-col items-end justify-around h-10 w-full'>\n\t\t\t\t\t\t\t<p className='font-bold text-right w-min max-w-full truncate'>{serialize(EthereumAddress, provider.value.walletAddress)}</p>\n\t\t\t\t\t\t\t<span className='text-gray-400 text-sm w-max flex gap-1 items-center'>\n\t\t\t\t\t\t\t\t<svg width='1em' height='1em' viewBox='0 0 48 48' xmlns='http://www.w3.org/2000/svg' className='inline-block'><path fill='currentColor' d='M44 32h-2v-8a2 2 0 0 0-2-2H26v-6h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-8a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2v6H8a2 2 0 0 0-2 2v8H4a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2h-2v-6h12v6h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2h-2v-6h12v6h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2Zm-34 8H6v-4h4ZM22 8h4v4h-4Zm4 32h-4v-4h4Zm16 0h-4v-4h4Z' data-name='icons Q2'></path></svg>\n\t\t\t\t\t\t\t\t{displayNetwork.value}</span>\n\t\t\t\t\t\t</div >\n\t\t\t\t\t\t<Blockie address={walletAddress} scale={blockieScale} />\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p className='w-max'>No Wallet Connected</p>\n\t\t\t\t\t\t<Button onClick={() => connectBrowserProvider(provider, blockInfo)}>Connect</Button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"]}